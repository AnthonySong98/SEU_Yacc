int	INT	1
t	IDENTIFIER	3
=	=	4
0	CONSTANT	5
,	,	6
j	IDENTIFIER	7
=	=	4
10	CONSTANT	8
,	,	6
tot	IDENTIFIER	9
,	,	6
ans	IDENTIFIER	10
;	;	11
int	INT	1
a	IDENTIFIER	14
[	[	15
10	CONSTANT	8
]	]	16
;	;	11
typedef	TYPEDEF	17
struct	STRUCT	18
node	IDENTIFIER	19
{	{	20
unsigned	UNSIGNED	22
int	INT	1
q	IDENTIFIER	23
;	;	11
struct	STRUCT	18
node	IDENTIFIER	19
*	*	24
next	IDENTIFIER	25
;	;	11
}	}	26
Node	IDENTIFIER	27
;	;	11
float	FLOAT	28
add	IDENTIFIER	29
(	(	30
int	INT	1
x	IDENTIFIER	31
)	)	32
{	{	20
static	STATIC	33
int	INT	1
p1	IDENTIFIER	34
=	=	4
1	CONSTANT	35
;	;	11
static	STATIC	33
double	DOUBLE	36
p2	IDENTIFIER	37
=	=	4
2	CONSTANT	38
;	;	11
static	STATIC	33
float	FLOAT	28
p3	IDENTIFIER	39
=	=	4
3	CONSTANT	40
;	;	11
p1	IDENTIFIER	34
+=	ADD_ASSIGN	41
x	IDENTIFIER	31
;	;	11
p2	IDENTIFIER	37
*=	MUL_ASSIGN	42
x	IDENTIFIER	31
;	;	11
p3	IDENTIFIER	39
-=	SUB_ASSIGN	43
x	IDENTIFIER	31
;	;	11
do	DO	44
{	{	20
Node	IDENTIFIER	27
*	*	24
ptrp1	IDENTIFIER	45
;	;	11
if	IF	46
(	(	30
ptr	IDENTIFIER	47
->	PTR_OP	48
next	IDENTIFIER	25
!=	NE_OP	49
0	CONSTANT	5
&&	AND_OP	50
3	CONSTANT	40
>=	GE_OP	51
2.0	CONSTANT	52
)	)	32
{	{	20
(	(	30
*	*	24
ptr	IDENTIFIER	47
)	)	32
.	.	53
q	IDENTIFIER	23
%=	MOD_ASSIGN	54
2	CONSTANT	38
;	;	11
}	}	26
else	ELSE	55
{	{	20
p1	IDENTIFIER	34
=	=	4
p2	IDENTIFIER	37
<	<	56
9	CONSTANT	57
?	?	58
p2	IDENTIFIER	37
:	:	59
p1	IDENTIFIER	34
*	*	24
p2	IDENTIFIER	37
;	;	11
continue	CONTINUE	60
;	;	11
}	}	26
}	}	26
while	WHILE	61
(	(	30
i	IDENTIFIER	62
!=	NE_OP	49
++	INC_OP	63
j	IDENTIFIER	7
)	)	32
;	;	11
return	RETURN	64
22.2	CONSTANT	65
;	;	11
}	}	26
int	INT	1
foo	IDENTIFIER	66
(	(	30
int	INT	1
*	*	24
a	IDENTIFIER	14
,	,	6
const	CONST	67
int	INT	1
*	*	24
b	IDENTIFIER	68
)	)	32
{	{	20
if	IF	46
(	(	30
a	IDENTIFIER	14
==	EQ_OP	69
b	IDENTIFIER	68
||	OR_OP	70
a	IDENTIFIER	14
!=	NE_OP	49
-0.2	CONSTANT	71
&&	AND_OP	50
b	IDENTIFIER	68
<<	LEFT_OP	72
1	CONSTANT	35
)	)	32
{	{	20
return	RETURN	64
sizeof	SIZEOF	73
(	(	30
int	INT	1
)	)	32
;	;	11
}	}	26
else	ELSE	55
{	{	20
foo	IDENTIFIER	66
(	(	30
&	&	74
a	IDENTIFIER	14
-	-	75
&	&	74
b	IDENTIFIER	68
,	,	6
&	&	74
b	IDENTIFIER	68
)	)	32
;	;	11
return	RETURN	64
;	;	11
}	}	26
}	}	26
enum	ENUM	76
week	IDENTIFIER	77
{	{	20
Mon	IDENTIFIER	78
=	=	4
1	CONSTANT	35
,	,	6
Tues	IDENTIFIER	79
=	=	4
2	CONSTANT	38
,	,	6
Wed	IDENTIFIER	80
=	=	4
3	CONSTANT	40
,	,	6
Thurs	IDENTIFIER	81
=	=	4
4	CONSTANT	82
,	,	6
Fri	IDENTIFIER	83
=	=	4
5	CONSTANT	84
,	,	6
Sat	IDENTIFIER	85
=	=	4
6	CONSTANT	86
,	,	6
Sun	IDENTIFIER	87
=	=	4
7	CONSTANT	88
}	}	26
;	;	11
int	INT	1
main	IDENTIFIER	89
(	(	30
int	INT	1
argc	IDENTIFIER	90
,	,	6
char	CHAR	91
const	CONST	67
*	*	24
argv	IDENTIFIER	92
[	[	15
]	]	16
)	)	32
{	{	20
tot	IDENTIFIER	9
=	=	4
10	CONSTANT	8
;	;	11
char	CHAR	91
a	IDENTIFIER	14
[	[	15
10	CONSTANT	8
]	]	16
=	=	4
{	{	20
"a"	STRING_LITERAL	93
,	,	6
"b"	STRING_LITERAL	94
,	,	6
"c"	STRING_LITERAL	95
,	,	6
"a"	STRING_LITERAL	93
,	,	6
"b"	STRING_LITERAL	94
,	,	6
"c"	STRING_LITERAL	95
,	,	6
"a"	STRING_LITERAL	93
,	,	6
"b"	STRING_LITERAL	94
,	,	6
"c"	STRING_LITERAL	95
,	,	6
"a"	STRING_LITERAL	93
,	,	6
"b"	STRING_LITERAL	94
,	,	6
"c"	STRING_LITERAL	95
}	}	26
;	;	11
unsigned	UNSIGNED	22
a	IDENTIFIER	14
[	[	15
12	CONSTANT	96
]	]	16
;	;	11
int	INT	1
(	(	30
*	*	24
(	(	30
*	*	24
func	IDENTIFIER	97
[	[	15
7	CONSTANT	88
]	]	16
[	[	15
8	CONSTANT	98
]	]	16
[	[	15
9	CONSTANT	57
]	]	16
)	)	32
(	(	30
int	INT	1
*	*	24
)	)	32
)	)	32
[	[	15
5	CONSTANT	84
]	]	16
;	;	11
for	FOR	99
(	(	30
int	INT	1
j	IDENTIFIER	7
=	=	4
0	CONSTANT	5
;	;	11
j	IDENTIFIER	7
<	<	56
12	CONSTANT	96
;	;	11
++	INC_OP	63
j	IDENTIFIER	7
)	)	32
{	{	20
a	IDENTIFIER	14
[	[	15
j	IDENTIFIER	7
]	]	16
+=	ADD_ASSIGN	41
j	IDENTIFIER	7
<<	LEFT_OP	72
1	CONSTANT	35
;	;	11
}	}	26
for	FOR	99
(	(	30
int	INT	1
i	IDENTIFIER	62
=	=	4
1	CONSTANT	35
;	;	11
i	IDENTIFIER	62
<=	LE_OP	100
10	CONSTANT	8
;	;	11
i	IDENTIFIER	62
+=	ADD_ASSIGN	41
1	CONSTANT	35
)	)	32
{	{	20
t	IDENTIFIER	3
=	=	4
t	IDENTIFIER	3
+	+	101
i	IDENTIFIER	62
;	;	11
while	WHILE	61
(	(	30
(	(	30
j	IDENTIFIER	7
>	>	102
0	CONSTANT	5
&&	AND_OP	50
j	IDENTIFIER	7
<	<	56
i	IDENTIFIER	62
)	)	32
||	OR_OP	70
i	IDENTIFIER	62
<	<	56
8	CONSTANT	98
)	)	32
tot	IDENTIFIER	9
=	=	4
tot	IDENTIFIER	9
*	*	24
t	IDENTIFIER	3
-	-	75
j	IDENTIFIER	7
/	/	103
i	IDENTIFIER	62
;	;	11
add	IDENTIFIER	29
(	(	30
i	IDENTIFIER	62
)	)	32
;	;	11
tot	IDENTIFIER	9
/=	DIV_ASSIGN	104
2	CONSTANT	38
;	;	11
}	}	26
if	IF	46
(	(	30
tot	IDENTIFIER	9
==	EQ_OP	69
tot	IDENTIFIER	9
&&	AND_OP	50
!	!	105
(	(	30
tot	IDENTIFIER	9
!=	NE_OP	49
tot	IDENTIFIER	9
)	)	32
)	)	32
add	IDENTIFIER	29
(	(	30
tot	IDENTIFIER	9
,	,	6
para1	IDENTIFIER	106
,	,	6
&	&	74
para2	IDENTIFIER	107
)	)	32
;	;	11
switch	SWITCH	108
(	(	30
j	IDENTIFIER	7
)	)	32
{	{	20
case	CASE	109
3	CONSTANT	40
:	:	59
{	{	20
foo	IDENTIFIER	66
(	(	30
&	&	74
a	IDENTIFIER	14
,	,	6
&	&	74
b	IDENTIFIER	68
)	)	32
;	;	11
break	BREAK	110
;	;	11
}	}	26
case	CASE	109
4	CONSTANT	82
:	:	59
{	{	20
if	IF	46
(	(	30
tot	IDENTIFIER	9
==	EQ_OP	69
tot	IDENTIFIER	9
&&	AND_OP	50
!	!	105
(	(	30
tot	IDENTIFIER	9
!=	NE_OP	49
tot	IDENTIFIER	9
)	)	32
)	)	32
add	IDENTIFIER	29
(	(	30
tot	IDENTIFIER	9
,	,	6
para1	IDENTIFIER	106
,	,	6
&	&	74
para2	IDENTIFIER	107
)	)	32
;	;	11
break	BREAK	110
;	;	11
}	}	26
case	CASE	109
5	CONSTANT	84
:	:	59
break	BREAK	110
;	;	11
default	DEFAULT	111
:	:	59
break	BREAK	110
;	;	11
}	}	26
int	INT	1
a	IDENTIFIER	14
[	[	15
3	CONSTANT	40
]	]	16
[	[	15
4	CONSTANT	82
]	]	16
=	=	4
{	{	20
{	{	20
0	CONSTANT	5
,	,	6
1	CONSTANT	35
,	,	6
2	CONSTANT	38
,	,	6
3	CONSTANT	40
}	}	26
,	,	6
{	{	20
4	CONSTANT	82
,	,	6
5	CONSTANT	84
,	,	6
6	CONSTANT	86
,	,	6
7	CONSTANT	88
}	}	26
,	,	6
{	{	20
8	CONSTANT	98
,	,	6
9	CONSTANT	57
,	,	6
10	CONSTANT	8
,	,	6
11	CONSTANT	112
}	}	26
}	}	26
;	;	11
printf	IDENTIFIER	113
(	(	30
"%d,%d,%d,%d,%d"	STRING_LITERAL	114
,	,	6
sizeof	SIZEOF	73
(	(	30
enum	ENUM	76
week	IDENTIFIER	77
)	)	32
,	,	6
sizeof	SIZEOF	73
(	(	30
day	IDENTIFIER	115
)	)	32
,	,	6
sizeof	SIZEOF	73
(	(	30
Mon	IDENTIFIER	78
)	)	32
,	,	6
sizeof	SIZEOF	73
(	(	30
Wed	IDENTIFIER	80
)	)	32
,	,	6
sizeof	SIZEOF	73
(	(	30
int	INT	1
)	)	32
)	)	32
;	;	11
for	FOR	99
(	(	30
j	IDENTIFIER	7
=	=	4
0	CONSTANT	5
;	;	11
j	IDENTIFIER	7
<	<	56
n2	IDENTIFIER	116
;	;	11
j	IDENTIFIER	7
++	INC_OP	63
)	)	32
{	{	20
(	(	30
*	*	24
p	IDENTIFIER	117
)	)	32
[	[	15
j	IDENTIFIER	7
]	]	16
.	.	53
stu	IDENTIFIER	118
=	=	4
(	(	30
char	CHAR	91
*	*	24
*	*	24
)	)	32
malloc	IDENTIFIER	119
(	(	30
sizeof	SIZEOF	73
(	(	30
char	CHAR	91
)	)	32
*	*	24
3	CONSTANT	40
)	)	32
;	;	11
if	IF	46
(	(	30
(	(	30
*	*	24
p	IDENTIFIER	117
)	)	32
[	[	15
j	IDENTIFIER	7
]	]	16
.	.	53
stu	IDENTIFIER	118
==	EQ_OP	69
0	CONSTANT	5
)	)	32
{	{	20
return	RETURN	64
false	IDENTIFIER	120
;	;	11
}	}	26
for	FOR	99
(	(	30
k	IDENTIFIER	121
=	=	4
0	CONSTANT	5
;	;	11
k	IDENTIFIER	121
<	<	56
3	CONSTANT	40
;	;	11
k	IDENTIFIER	121
++	INC_OP	63
)	)	32
{	{	20
(	(	30
*	*	24
p	IDENTIFIER	117
)	)	32
[	[	15
j	IDENTIFIER	7
]	]	16
.	.	53
stu	IDENTIFIER	118
[	[	15
k	IDENTIFIER	121
]	]	16
=	=	4
(	(	30
char	CHAR	91
*	*	24
)	)	32
malloc	IDENTIFIER	119
(	(	30
sizeof	SIZEOF	73
(	(	30
char	CHAR	91
)	)	32
*	*	24
20	CONSTANT	122
)	)	32
;	;	11
if	IF	46
(	(	30
(	(	30
*	*	24
p	IDENTIFIER	117
)	)	32
[	[	15
j	IDENTIFIER	7
]	]	16
.	.	53
stu	IDENTIFIER	118
[	[	15
k	IDENTIFIER	121
]	]	16
==	EQ_OP	69
0	CONSTANT	5
)	)	32
{	{	20
return	RETURN	64
false	IDENTIFIER	120
;	;	11
}	}	26
}	}	26
}	}	26
return	RETURN	64
0	CONSTANT	5
;	;	11
}	}	26
